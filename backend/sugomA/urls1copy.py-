import json
from typing import cast

from ariadne import format_error
from ariadne.constants import PLAYGROUND_HTML
from ariadne.exceptions import HttpBadRequestError
from ariadne.graphql import graphql_sync
from ariadne_django.views.base import BaseGraphQLView
# from graphene_django.views import GraphQLView
# from ariadne_django.views import GraphQLView
from django.contrib import admin
from django.http import (HttpRequest, HttpResponse, HttpResponseBadRequest,
                         JsonResponse)
from django.http.response import JsonResponse
from django.urls import path
from django.utils.decorators import method_decorator
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from graphql import GraphQLSchema, graphql

from .AmogusApp.views import check, home
from .schema import code_smell, schema

# def context_value(request):
#     print("context_value")
#     print(request)
#     return {}


# django store data based on cookie session
# https://stackoverflow.com/questions/45887660/where-djangos-cookie-based-session-data-is-stored

# http://www.dcs.gla.ac.uk/~leif/di/tutorial/cookie.html#:~:text=Django%20provides%20a%20session%20framework,is%20not%20stored%20client%20side.

# https://github.com/mirumee/ariadne/issues/292

# https://www.javatpoint.com/django-cookie

# https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Sessions

# https://stackoverflow.com/questions/17716624/django-csrf-cookie-not-set

# https://stackoverflow.com/questions/22593948/websocket-authentication-security

# https://stackoverflow.com/questions/69524232/django-set-cookie-does-not-set-cookie-in-browser


def track(view):
    def wrapper(*args, **kwargs):
        request, *_ = args
        # if request.method == "POST":
        code_smell.storage = request.session

        print(code_smell)
        code_smell["a"] += 1
        print(request.session.items())

        response = view(*args, **kwargs)

        if code_smell["requested_auth"] > 0:
            code_smell["requested_auth"] -= 1

        if isinstance(response, JsonResponse):
            data = json.loads(response.content)
            if "data" in data and "errors" in data:
                del data["data"]
            response = JsonResponse(data)  # json.dumps(data)
        # else:
        #     code_smell.reset()

        # print("wrapper")

        # a = int(request.COOKIES.get("a", "0"))
        # print(a)
        # # responce.set_signed_cookie()
        # response.set_cookie("a", str(a + 1))

        # # a = request.session.get("a", 0)
        # # print(a)
        # # request.session["a"] = a + 1

        # # storage = getattr(request, "_my_storage", {})
        # # # print(storage)
        # # for k, v in storage.items():
        # #     response.set_cookie(k, v)

        # print(response)

        return response

    wrapper.csrf_exempt = True
    return wrapper


# def on_connect(websocket, params):
#     print(websocket, params)


mapping = {"A": {"message": "Authentication failed"}}


def my_format_error(error, debug: bool = False) -> dict:
    # # Create formatted error data
    # formatted = error.formatted
    # # Replace original error message with custom one
    # formatted["message"] = "INTERNAL SERVER ERROR"

    result = mapping.get(error.message, None)
    if result is not None:
        return result

    return format_error(error, debug)


class _GraphQLView(View):
    # On GET request serve GraphQL Playground
    # You don't need to provide Playground if you don't want to
    # bet keep on mind this will nor prohibit clients from
    # exploring your API using desktop GraphQL Playground app.
    # def get(self, request, *args, **kwargs):
    #     return HttpResponse(PLAYGROUND_HTML)

    # GraphQL queries are always sent as POSTd
    def post(self, request, *args, **kwargs):
        # Reject requests that aren't JSON
        if request.content_type != "application/json":
            return HttpResponseBadRequest()

        # Naively read data from JSON request
        try:
            data = json.loads(request.body)
        except ValueError:
            return HttpResponseBadRequest()

        # Check if instance data is not empty and dict
        if not data or not isinstance(data, dict):
            return HttpResponseBadRequest()

        # Check if variables are dict:
        variables = data.get("variables")
        if variables and not isinstance(variables, dict):
            return HttpResponseBadRequest()

        # Execute the query
        result = graphql(
            schema,
            data.get("query"),
            context_value=request,  # expose request as info.context
            variable_values=data.get("variables"),
            operation_name=data.get("operationName"),
        )

        # Build valid GraphQL API response
        if result.errors:
            response = {"errors": [my_format_error(e) for e in result.errors]}
        else:
            response = {"data": result.data}

        # Send response to client
        return JsonResponse(response)



@method_decorator(csrf_exempt, name="dispatch")
class GraphQLView(BaseGraphQLView):
    def dispatch(self, *args, **kwargs):
        if not self.schema:
            raise ValueError("GraphQLView was initialized without schema.")
        try:
            return super().dispatch(*args, **kwargs)
        except HttpBadRequestError as error:
            return HttpResponseBadRequest(error.message)

    def post(self, request: HttpRequest, *args, **kwargs):  # pylint: disable=unused-argument
        try:
            data = self.extract_data_from_request(request)
        except HttpBadRequestError as error:
            return HttpResponseBadRequest(error.message)

        code_smell.storage = request.session

        print(code_smell)
        code_smell["a"] += 1
        print(request.session.items())

        success, result = graphql_sync(cast(GraphQLSchema, self.schema), data, **self.get_kwargs_graphql(request))
        status_code = 200 if success else 400

        if code_smell["requested_auth"] > 0:
            code_smell["requested_auth"] -= 1

        if "data" in result and "errors" in result:
            del result["data"]

        response = JsonResponse(result, status=status_code)

        # for n, v in code_smell.storage.items():
        #     response.set_cookie(n, v)

        return response


# https://github.com/mirumee/ariadne/search?q=post


urlpatterns = [
    path("", csrf_exempt(home)),
    path("admin/", admin.site.urls),
    # path('graphql/', my_GraphQLView, name='graphql'),
    path('graphql',
         (GraphQLView.as_view(schema=schema, error_formatter=my_format_error)),
         # track(GraphQLView.as_view(schema=schema, error_formatter=my_format_error)),
         name='graphql'),
    path("check", csrf_exempt(check)),
    # path("graphql", csrf_exempt(GraphQLView.as_view(graphiql=True))),
]

"""

private_key = "0x29e806f1d1a1e1ca473cd00daf213e51ae70136ff486e1b55a19745e059b96de"

# query {
#   authentication { address, isLandlord }
# }

# mutation {
#   message: requestAuthentication(
#     address: "<address-1>"
#   )
# }

# mutation {
#   authentication: authenticate(
#     address: "0xCe746b0E2aF26F13C8513b2f985746D65c906f72"
#     signedMessage: {
#       v: "0x1b"
#       r: "0xbe4d9d4de333ca1d6b2697bd5614e7d6006bca8fb9b01f915c04f80dbd579868"
#       s: "0x2f6237bcdd563c0c560faeb3053fb9b0b646317264d2f279c708e118b2ce2fba"}
#   ) {
#     address
#     isLandlord
#   }
# }




query{countries{name}}
http://127.0.0.1:6969/graphql?query=query{authentication{address,isLandlord}}
query=query{authentication{address,isLandlord}}

# Write your query or mutation here

query {
  authentication { address, isLandlord }
}

# mutation {
#   message: requestAuthentication(
#     address: "<address-1>"
#   )
# }

# mutation {
#   authentication: authenticate(
#     address: "<addr>"
#     signedMessage: {v: "sdf" r: "d" s: "sdf"}
#   ) {
#     address
#     isLandlord
#   }
# }


"""
